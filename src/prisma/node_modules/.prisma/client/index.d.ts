
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model cliente
 * 
 */
export type cliente = {
  id_cliente: number
  nome: string | null
}

/**
 * Model item
 * 
 */
export type item = {
  id_item: number
  valor: number | null
  id_produto: number | null
  id_venda: number | null
}

/**
 * Model produto
 * 
 */
export type produto = {
  id_produto: number
  nome: string | null
  valor: number | null
}

/**
 * Model venda
 * 
 */
export type venda = {
  id_venda: number
  frete: number | null
  total: number | null
  id_cliente: number | null
  dataCadastro: Date | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Clientes
 * const clientes = await prisma.cliente.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Clientes
   * const clientes = await prisma.cliente.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;


      /**
   * `prisma.cliente`: Exposes CRUD operations for the **cliente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clientes
    * const clientes = await prisma.cliente.findMany()
    * ```
    */
  get cliente(): Prisma.clienteDelegate<GlobalReject>;

  /**
   * `prisma.item`: Exposes CRUD operations for the **item** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Items
    * const items = await prisma.item.findMany()
    * ```
    */
  get item(): Prisma.itemDelegate<GlobalReject>;

  /**
   * `prisma.produto`: Exposes CRUD operations for the **produto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Produtos
    * const produtos = await prisma.produto.findMany()
    * ```
    */
  get produto(): Prisma.produtoDelegate<GlobalReject>;

  /**
   * `prisma.venda`: Exposes CRUD operations for the **venda** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vendas
    * const vendas = await prisma.venda.findMany()
    * ```
    */
  get venda(): Prisma.vendaDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.5.0
   * Query Engine version: 78a5df6def6943431f4c022e1428dbc3e833cf8e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    cliente: 'cliente',
    item: 'item',
    produto: 'produto',
    venda: 'venda'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ClienteCountOutputType
   */


  export type ClienteCountOutputType = {
    venda: number
  }

  export type ClienteCountOutputTypeSelect = {
    venda?: boolean
  }

  export type ClienteCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ClienteCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ClienteCountOutputType
    : S extends undefined
    ? never
    : S extends ClienteCountOutputTypeArgs
    ?'include' extends U
    ? ClienteCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof ClienteCountOutputType ?ClienteCountOutputType [P]
  : 
     never
  } 
    : ClienteCountOutputType
  : ClienteCountOutputType




  // Custom InputTypes

  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ClienteCountOutputType
     * 
    **/
    select?: ClienteCountOutputTypeSelect | null
  }



  /**
   * Count Type ProdutoCountOutputType
   */


  export type ProdutoCountOutputType = {
    item: number
  }

  export type ProdutoCountOutputTypeSelect = {
    item?: boolean
  }

  export type ProdutoCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ProdutoCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ProdutoCountOutputType
    : S extends undefined
    ? never
    : S extends ProdutoCountOutputTypeArgs
    ?'include' extends U
    ? ProdutoCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof ProdutoCountOutputType ?ProdutoCountOutputType [P]
  : 
     never
  } 
    : ProdutoCountOutputType
  : ProdutoCountOutputType




  // Custom InputTypes

  /**
   * ProdutoCountOutputType without action
   */
  export type ProdutoCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProdutoCountOutputType
     * 
    **/
    select?: ProdutoCountOutputTypeSelect | null
  }



  /**
   * Count Type VendaCountOutputType
   */


  export type VendaCountOutputType = {
    item: number
  }

  export type VendaCountOutputTypeSelect = {
    item?: boolean
  }

  export type VendaCountOutputTypeGetPayload<
    S extends boolean | null | undefined | VendaCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? VendaCountOutputType
    : S extends undefined
    ? never
    : S extends VendaCountOutputTypeArgs
    ?'include' extends U
    ? VendaCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof VendaCountOutputType ?VendaCountOutputType [P]
  : 
     never
  } 
    : VendaCountOutputType
  : VendaCountOutputType




  // Custom InputTypes

  /**
   * VendaCountOutputType without action
   */
  export type VendaCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the VendaCountOutputType
     * 
    **/
    select?: VendaCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model cliente
   */


  export type AggregateCliente = {
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  export type ClienteAvgAggregateOutputType = {
    id_cliente: number | null
  }

  export type ClienteSumAggregateOutputType = {
    id_cliente: number | null
  }

  export type ClienteMinAggregateOutputType = {
    id_cliente: number | null
    nome: string | null
  }

  export type ClienteMaxAggregateOutputType = {
    id_cliente: number | null
    nome: string | null
  }

  export type ClienteCountAggregateOutputType = {
    id_cliente: number
    nome: number
    _all: number
  }


  export type ClienteAvgAggregateInputType = {
    id_cliente?: true
  }

  export type ClienteSumAggregateInputType = {
    id_cliente?: true
  }

  export type ClienteMinAggregateInputType = {
    id_cliente?: true
    nome?: true
  }

  export type ClienteMaxAggregateInputType = {
    id_cliente?: true
    nome?: true
  }

  export type ClienteCountAggregateInputType = {
    id_cliente?: true
    nome?: true
    _all?: true
  }

  export type ClienteAggregateArgs = {
    /**
     * Filter which cliente to aggregate.
     * 
    **/
    where?: clienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes to fetch.
     * 
    **/
    orderBy?: Enumerable<clienteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: clienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned clientes
    **/
    _count?: true | ClienteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClienteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClienteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClienteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClienteMaxAggregateInputType
  }

  export type GetClienteAggregateType<T extends ClienteAggregateArgs> = {
        [P in keyof T & keyof AggregateCliente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCliente[P]>
      : GetScalarType<T[P], AggregateCliente[P]>
  }




  export type ClienteGroupByArgs = {
    where?: clienteWhereInput
    orderBy?: Enumerable<clienteOrderByWithAggregationInput>
    by: Array<ClienteScalarFieldEnum>
    having?: clienteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClienteCountAggregateInputType | true
    _avg?: ClienteAvgAggregateInputType
    _sum?: ClienteSumAggregateInputType
    _min?: ClienteMinAggregateInputType
    _max?: ClienteMaxAggregateInputType
  }


  export type ClienteGroupByOutputType = {
    id_cliente: number
    nome: string | null
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  type GetClienteGroupByPayload<T extends ClienteGroupByArgs> = Promise<
    Array<
      PickArray<ClienteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClienteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClienteGroupByOutputType[P]>
            : GetScalarType<T[P], ClienteGroupByOutputType[P]>
        }
      >
    >


  export type clienteSelect = {
    id_cliente?: boolean
    nome?: boolean
    venda?: boolean | vendaFindManyArgs
    _count?: boolean | ClienteCountOutputTypeArgs
  }

  export type clienteInclude = {
    venda?: boolean | vendaFindManyArgs
    _count?: boolean | ClienteCountOutputTypeArgs
  }

  export type clienteGetPayload<
    S extends boolean | null | undefined | clienteArgs,
    U = keyof S
      > = S extends true
        ? cliente
    : S extends undefined
    ? never
    : S extends clienteArgs | clienteFindManyArgs
    ?'include' extends U
    ? cliente  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'venda'
        ? Array < vendaGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? ClienteCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof cliente ?cliente [P]
  : 
          P extends 'venda'
        ? Array < vendaGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? ClienteCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : cliente
  : cliente


  type clienteCountArgs = Merge<
    Omit<clienteFindManyArgs, 'select' | 'include'> & {
      select?: ClienteCountAggregateInputType | true
    }
  >

  export interface clienteDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Cliente that matches the filter.
     * @param {clienteFindUniqueArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends clienteFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, clienteFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'cliente'> extends True ? CheckSelect<T, Prisma__clienteClient<cliente>, Prisma__clienteClient<clienteGetPayload<T>>> : CheckSelect<T, Prisma__clienteClient<cliente | null >, Prisma__clienteClient<clienteGetPayload<T> | null >>

    /**
     * Find the first Cliente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clienteFindFirstArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends clienteFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, clienteFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'cliente'> extends True ? CheckSelect<T, Prisma__clienteClient<cliente>, Prisma__clienteClient<clienteGetPayload<T>>> : CheckSelect<T, Prisma__clienteClient<cliente | null >, Prisma__clienteClient<clienteGetPayload<T> | null >>

    /**
     * Find zero or more Clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clienteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clientes
     * const clientes = await prisma.cliente.findMany()
     * 
     * // Get first 10 Clientes
     * const clientes = await prisma.cliente.findMany({ take: 10 })
     * 
     * // Only select the `id_cliente`
     * const clienteWithId_clienteOnly = await prisma.cliente.findMany({ select: { id_cliente: true } })
     * 
    **/
    findMany<T extends clienteFindManyArgs>(
      args?: SelectSubset<T, clienteFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<cliente>>, PrismaPromise<Array<clienteGetPayload<T>>>>

    /**
     * Create a Cliente.
     * @param {clienteCreateArgs} args - Arguments to create a Cliente.
     * @example
     * // Create one Cliente
     * const Cliente = await prisma.cliente.create({
     *   data: {
     *     // ... data to create a Cliente
     *   }
     * })
     * 
    **/
    create<T extends clienteCreateArgs>(
      args: SelectSubset<T, clienteCreateArgs>
    ): CheckSelect<T, Prisma__clienteClient<cliente>, Prisma__clienteClient<clienteGetPayload<T>>>

    /**
     * Create many Clientes.
     *     @param {clienteCreateManyArgs} args - Arguments to create many Clientes.
     *     @example
     *     // Create many Clientes
     *     const cliente = await prisma.cliente.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends clienteCreateManyArgs>(
      args?: SelectSubset<T, clienteCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Cliente.
     * @param {clienteDeleteArgs} args - Arguments to delete one Cliente.
     * @example
     * // Delete one Cliente
     * const Cliente = await prisma.cliente.delete({
     *   where: {
     *     // ... filter to delete one Cliente
     *   }
     * })
     * 
    **/
    delete<T extends clienteDeleteArgs>(
      args: SelectSubset<T, clienteDeleteArgs>
    ): CheckSelect<T, Prisma__clienteClient<cliente>, Prisma__clienteClient<clienteGetPayload<T>>>

    /**
     * Update one Cliente.
     * @param {clienteUpdateArgs} args - Arguments to update one Cliente.
     * @example
     * // Update one Cliente
     * const cliente = await prisma.cliente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends clienteUpdateArgs>(
      args: SelectSubset<T, clienteUpdateArgs>
    ): CheckSelect<T, Prisma__clienteClient<cliente>, Prisma__clienteClient<clienteGetPayload<T>>>

    /**
     * Delete zero or more Clientes.
     * @param {clienteDeleteManyArgs} args - Arguments to filter Clientes to delete.
     * @example
     * // Delete a few Clientes
     * const { count } = await prisma.cliente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends clienteDeleteManyArgs>(
      args?: SelectSubset<T, clienteDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clienteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clientes
     * const cliente = await prisma.cliente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends clienteUpdateManyArgs>(
      args: SelectSubset<T, clienteUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Cliente.
     * @param {clienteUpsertArgs} args - Arguments to update or create a Cliente.
     * @example
     * // Update or create a Cliente
     * const cliente = await prisma.cliente.upsert({
     *   create: {
     *     // ... data to create a Cliente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cliente we want to update
     *   }
     * })
    **/
    upsert<T extends clienteUpsertArgs>(
      args: SelectSubset<T, clienteUpsertArgs>
    ): CheckSelect<T, Prisma__clienteClient<cliente>, Prisma__clienteClient<clienteGetPayload<T>>>

    /**
     * Count the number of Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clienteCountArgs} args - Arguments to filter Clientes to count.
     * @example
     * // Count the number of Clientes
     * const count = await prisma.cliente.count({
     *   where: {
     *     // ... the filter for the Clientes we want to count
     *   }
     * })
    **/
    count<T extends clienteCountArgs>(
      args?: Subset<T, clienteCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClienteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClienteAggregateArgs>(args: Subset<T, ClienteAggregateArgs>): PrismaPromise<GetClienteAggregateType<T>>

    /**
     * Group by Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClienteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClienteGroupByArgs['orderBy'] }
        : { orderBy?: ClienteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClienteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClienteGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for cliente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__clienteClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    venda<T extends vendaFindManyArgs = {}>(args?: Subset<T, vendaFindManyArgs>): CheckSelect<T, PrismaPromise<Array<venda>>, PrismaPromise<Array<vendaGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * cliente findUnique
   */
  export type clienteFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the cliente
     * 
    **/
    select?: clienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: clienteInclude | null
    /**
     * Throw an Error if a cliente can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which cliente to fetch.
     * 
    **/
    where: clienteWhereUniqueInput
  }


  /**
   * cliente findFirst
   */
  export type clienteFindFirstArgs = {
    /**
     * Select specific fields to fetch from the cliente
     * 
    **/
    select?: clienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: clienteInclude | null
    /**
     * Throw an Error if a cliente can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which cliente to fetch.
     * 
    **/
    where?: clienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes to fetch.
     * 
    **/
    orderBy?: Enumerable<clienteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clientes.
     * 
    **/
    cursor?: clienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clientes.
     * 
    **/
    distinct?: Enumerable<ClienteScalarFieldEnum>
  }


  /**
   * cliente findMany
   */
  export type clienteFindManyArgs = {
    /**
     * Select specific fields to fetch from the cliente
     * 
    **/
    select?: clienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: clienteInclude | null
    /**
     * Filter, which clientes to fetch.
     * 
    **/
    where?: clienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes to fetch.
     * 
    **/
    orderBy?: Enumerable<clienteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing clientes.
     * 
    **/
    cursor?: clienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ClienteScalarFieldEnum>
  }


  /**
   * cliente create
   */
  export type clienteCreateArgs = {
    /**
     * Select specific fields to fetch from the cliente
     * 
    **/
    select?: clienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: clienteInclude | null
    /**
     * The data needed to create a cliente.
     * 
    **/
    data: XOR<clienteCreateInput, clienteUncheckedCreateInput>
  }


  /**
   * cliente createMany
   */
  export type clienteCreateManyArgs = {
    data: Enumerable<clienteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * cliente update
   */
  export type clienteUpdateArgs = {
    /**
     * Select specific fields to fetch from the cliente
     * 
    **/
    select?: clienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: clienteInclude | null
    /**
     * The data needed to update a cliente.
     * 
    **/
    data: XOR<clienteUpdateInput, clienteUncheckedUpdateInput>
    /**
     * Choose, which cliente to update.
     * 
    **/
    where: clienteWhereUniqueInput
  }


  /**
   * cliente updateMany
   */
  export type clienteUpdateManyArgs = {
    data: XOR<clienteUpdateManyMutationInput, clienteUncheckedUpdateManyInput>
    where?: clienteWhereInput
  }


  /**
   * cliente upsert
   */
  export type clienteUpsertArgs = {
    /**
     * Select specific fields to fetch from the cliente
     * 
    **/
    select?: clienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: clienteInclude | null
    /**
     * The filter to search for the cliente to update in case it exists.
     * 
    **/
    where: clienteWhereUniqueInput
    /**
     * In case the cliente found by the `where` argument doesn't exist, create a new cliente with this data.
     * 
    **/
    create: XOR<clienteCreateInput, clienteUncheckedCreateInput>
    /**
     * In case the cliente was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<clienteUpdateInput, clienteUncheckedUpdateInput>
  }


  /**
   * cliente delete
   */
  export type clienteDeleteArgs = {
    /**
     * Select specific fields to fetch from the cliente
     * 
    **/
    select?: clienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: clienteInclude | null
    /**
     * Filter which cliente to delete.
     * 
    **/
    where: clienteWhereUniqueInput
  }


  /**
   * cliente deleteMany
   */
  export type clienteDeleteManyArgs = {
    where?: clienteWhereInput
  }


  /**
   * cliente without action
   */
  export type clienteArgs = {
    /**
     * Select specific fields to fetch from the cliente
     * 
    **/
    select?: clienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: clienteInclude | null
  }



  /**
   * Model item
   */


  export type AggregateItem = {
    _count: ItemCountAggregateOutputType | null
    _avg: ItemAvgAggregateOutputType | null
    _sum: ItemSumAggregateOutputType | null
    _min: ItemMinAggregateOutputType | null
    _max: ItemMaxAggregateOutputType | null
  }

  export type ItemAvgAggregateOutputType = {
    id_item: number | null
    valor: number | null
    id_produto: number | null
    id_venda: number | null
  }

  export type ItemSumAggregateOutputType = {
    id_item: number | null
    valor: number | null
    id_produto: number | null
    id_venda: number | null
  }

  export type ItemMinAggregateOutputType = {
    id_item: number | null
    valor: number | null
    id_produto: number | null
    id_venda: number | null
  }

  export type ItemMaxAggregateOutputType = {
    id_item: number | null
    valor: number | null
    id_produto: number | null
    id_venda: number | null
  }

  export type ItemCountAggregateOutputType = {
    id_item: number
    valor: number
    id_produto: number
    id_venda: number
    _all: number
  }


  export type ItemAvgAggregateInputType = {
    id_item?: true
    valor?: true
    id_produto?: true
    id_venda?: true
  }

  export type ItemSumAggregateInputType = {
    id_item?: true
    valor?: true
    id_produto?: true
    id_venda?: true
  }

  export type ItemMinAggregateInputType = {
    id_item?: true
    valor?: true
    id_produto?: true
    id_venda?: true
  }

  export type ItemMaxAggregateInputType = {
    id_item?: true
    valor?: true
    id_produto?: true
    id_venda?: true
  }

  export type ItemCountAggregateInputType = {
    id_item?: true
    valor?: true
    id_produto?: true
    id_venda?: true
    _all?: true
  }

  export type ItemAggregateArgs = {
    /**
     * Filter which item to aggregate.
     * 
    **/
    where?: itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of items to fetch.
     * 
    **/
    orderBy?: Enumerable<itemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` items from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` items.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned items
    **/
    _count?: true | ItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ItemMaxAggregateInputType
  }

  export type GetItemAggregateType<T extends ItemAggregateArgs> = {
        [P in keyof T & keyof AggregateItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateItem[P]>
      : GetScalarType<T[P], AggregateItem[P]>
  }




  export type ItemGroupByArgs = {
    where?: itemWhereInput
    orderBy?: Enumerable<itemOrderByWithAggregationInput>
    by: Array<ItemScalarFieldEnum>
    having?: itemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ItemCountAggregateInputType | true
    _avg?: ItemAvgAggregateInputType
    _sum?: ItemSumAggregateInputType
    _min?: ItemMinAggregateInputType
    _max?: ItemMaxAggregateInputType
  }


  export type ItemGroupByOutputType = {
    id_item: number
    valor: number | null
    id_produto: number | null
    id_venda: number | null
    _count: ItemCountAggregateOutputType | null
    _avg: ItemAvgAggregateOutputType | null
    _sum: ItemSumAggregateOutputType | null
    _min: ItemMinAggregateOutputType | null
    _max: ItemMaxAggregateOutputType | null
  }

  type GetItemGroupByPayload<T extends ItemGroupByArgs> = Promise<
    Array<
      PickArray<ItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ItemGroupByOutputType[P]>
            : GetScalarType<T[P], ItemGroupByOutputType[P]>
        }
      >
    >


  export type itemSelect = {
    id_item?: boolean
    valor?: boolean
    id_produto?: boolean
    id_venda?: boolean
    produto?: boolean | produtoArgs
    venda?: boolean | vendaArgs
  }

  export type itemInclude = {
    produto?: boolean | produtoArgs
    venda?: boolean | vendaArgs
  }

  export type itemGetPayload<
    S extends boolean | null | undefined | itemArgs,
    U = keyof S
      > = S extends true
        ? item
    : S extends undefined
    ? never
    : S extends itemArgs | itemFindManyArgs
    ?'include' extends U
    ? item  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'produto'
        ? produtoGetPayload<S['include'][P]> | null :
        P extends 'venda'
        ? vendaGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof item ?item [P]
  : 
          P extends 'produto'
        ? produtoGetPayload<S['select'][P]> | null :
        P extends 'venda'
        ? vendaGetPayload<S['select'][P]> | null : never
  } 
    : item
  : item


  type itemCountArgs = Merge<
    Omit<itemFindManyArgs, 'select' | 'include'> & {
      select?: ItemCountAggregateInputType | true
    }
  >

  export interface itemDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Item that matches the filter.
     * @param {itemFindUniqueArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends itemFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, itemFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'item'> extends True ? CheckSelect<T, Prisma__itemClient<item>, Prisma__itemClient<itemGetPayload<T>>> : CheckSelect<T, Prisma__itemClient<item | null >, Prisma__itemClient<itemGetPayload<T> | null >>

    /**
     * Find the first Item that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itemFindFirstArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends itemFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, itemFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'item'> extends True ? CheckSelect<T, Prisma__itemClient<item>, Prisma__itemClient<itemGetPayload<T>>> : CheckSelect<T, Prisma__itemClient<item | null >, Prisma__itemClient<itemGetPayload<T> | null >>

    /**
     * Find zero or more Items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itemFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Items
     * const items = await prisma.item.findMany()
     * 
     * // Get first 10 Items
     * const items = await prisma.item.findMany({ take: 10 })
     * 
     * // Only select the `id_item`
     * const itemWithId_itemOnly = await prisma.item.findMany({ select: { id_item: true } })
     * 
    **/
    findMany<T extends itemFindManyArgs>(
      args?: SelectSubset<T, itemFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<item>>, PrismaPromise<Array<itemGetPayload<T>>>>

    /**
     * Create a Item.
     * @param {itemCreateArgs} args - Arguments to create a Item.
     * @example
     * // Create one Item
     * const Item = await prisma.item.create({
     *   data: {
     *     // ... data to create a Item
     *   }
     * })
     * 
    **/
    create<T extends itemCreateArgs>(
      args: SelectSubset<T, itemCreateArgs>
    ): CheckSelect<T, Prisma__itemClient<item>, Prisma__itemClient<itemGetPayload<T>>>

    /**
     * Create many Items.
     *     @param {itemCreateManyArgs} args - Arguments to create many Items.
     *     @example
     *     // Create many Items
     *     const item = await prisma.item.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends itemCreateManyArgs>(
      args?: SelectSubset<T, itemCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Item.
     * @param {itemDeleteArgs} args - Arguments to delete one Item.
     * @example
     * // Delete one Item
     * const Item = await prisma.item.delete({
     *   where: {
     *     // ... filter to delete one Item
     *   }
     * })
     * 
    **/
    delete<T extends itemDeleteArgs>(
      args: SelectSubset<T, itemDeleteArgs>
    ): CheckSelect<T, Prisma__itemClient<item>, Prisma__itemClient<itemGetPayload<T>>>

    /**
     * Update one Item.
     * @param {itemUpdateArgs} args - Arguments to update one Item.
     * @example
     * // Update one Item
     * const item = await prisma.item.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends itemUpdateArgs>(
      args: SelectSubset<T, itemUpdateArgs>
    ): CheckSelect<T, Prisma__itemClient<item>, Prisma__itemClient<itemGetPayload<T>>>

    /**
     * Delete zero or more Items.
     * @param {itemDeleteManyArgs} args - Arguments to filter Items to delete.
     * @example
     * // Delete a few Items
     * const { count } = await prisma.item.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends itemDeleteManyArgs>(
      args?: SelectSubset<T, itemDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Items
     * const item = await prisma.item.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends itemUpdateManyArgs>(
      args: SelectSubset<T, itemUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Item.
     * @param {itemUpsertArgs} args - Arguments to update or create a Item.
     * @example
     * // Update or create a Item
     * const item = await prisma.item.upsert({
     *   create: {
     *     // ... data to create a Item
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Item we want to update
     *   }
     * })
    **/
    upsert<T extends itemUpsertArgs>(
      args: SelectSubset<T, itemUpsertArgs>
    ): CheckSelect<T, Prisma__itemClient<item>, Prisma__itemClient<itemGetPayload<T>>>

    /**
     * Count the number of Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itemCountArgs} args - Arguments to filter Items to count.
     * @example
     * // Count the number of Items
     * const count = await prisma.item.count({
     *   where: {
     *     // ... the filter for the Items we want to count
     *   }
     * })
    **/
    count<T extends itemCountArgs>(
      args?: Subset<T, itemCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ItemAggregateArgs>(args: Subset<T, ItemAggregateArgs>): PrismaPromise<GetItemAggregateType<T>>

    /**
     * Group by Item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ItemGroupByArgs['orderBy'] }
        : { orderBy?: ItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItemGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for item.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__itemClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    produto<T extends produtoArgs = {}>(args?: Subset<T, produtoArgs>): CheckSelect<T, Prisma__produtoClient<produto | null >, Prisma__produtoClient<produtoGetPayload<T> | null >>;

    venda<T extends vendaArgs = {}>(args?: Subset<T, vendaArgs>): CheckSelect<T, Prisma__vendaClient<venda | null >, Prisma__vendaClient<vendaGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * item findUnique
   */
  export type itemFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the item
     * 
    **/
    select?: itemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: itemInclude | null
    /**
     * Throw an Error if a item can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which item to fetch.
     * 
    **/
    where: itemWhereUniqueInput
  }


  /**
   * item findFirst
   */
  export type itemFindFirstArgs = {
    /**
     * Select specific fields to fetch from the item
     * 
    **/
    select?: itemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: itemInclude | null
    /**
     * Throw an Error if a item can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which item to fetch.
     * 
    **/
    where?: itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of items to fetch.
     * 
    **/
    orderBy?: Enumerable<itemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for items.
     * 
    **/
    cursor?: itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` items from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` items.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of items.
     * 
    **/
    distinct?: Enumerable<ItemScalarFieldEnum>
  }


  /**
   * item findMany
   */
  export type itemFindManyArgs = {
    /**
     * Select specific fields to fetch from the item
     * 
    **/
    select?: itemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: itemInclude | null
    /**
     * Filter, which items to fetch.
     * 
    **/
    where?: itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of items to fetch.
     * 
    **/
    orderBy?: Enumerable<itemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing items.
     * 
    **/
    cursor?: itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` items from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` items.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ItemScalarFieldEnum>
  }


  /**
   * item create
   */
  export type itemCreateArgs = {
    /**
     * Select specific fields to fetch from the item
     * 
    **/
    select?: itemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: itemInclude | null
    /**
     * The data needed to create a item.
     * 
    **/
    data: XOR<itemCreateInput, itemUncheckedCreateInput>
  }


  /**
   * item createMany
   */
  export type itemCreateManyArgs = {
    data: Enumerable<itemCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * item update
   */
  export type itemUpdateArgs = {
    /**
     * Select specific fields to fetch from the item
     * 
    **/
    select?: itemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: itemInclude | null
    /**
     * The data needed to update a item.
     * 
    **/
    data: XOR<itemUpdateInput, itemUncheckedUpdateInput>
    /**
     * Choose, which item to update.
     * 
    **/
    where: itemWhereUniqueInput
  }


  /**
   * item updateMany
   */
  export type itemUpdateManyArgs = {
    data: XOR<itemUpdateManyMutationInput, itemUncheckedUpdateManyInput>
    where?: itemWhereInput
  }


  /**
   * item upsert
   */
  export type itemUpsertArgs = {
    /**
     * Select specific fields to fetch from the item
     * 
    **/
    select?: itemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: itemInclude | null
    /**
     * The filter to search for the item to update in case it exists.
     * 
    **/
    where: itemWhereUniqueInput
    /**
     * In case the item found by the `where` argument doesn't exist, create a new item with this data.
     * 
    **/
    create: XOR<itemCreateInput, itemUncheckedCreateInput>
    /**
     * In case the item was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<itemUpdateInput, itemUncheckedUpdateInput>
  }


  /**
   * item delete
   */
  export type itemDeleteArgs = {
    /**
     * Select specific fields to fetch from the item
     * 
    **/
    select?: itemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: itemInclude | null
    /**
     * Filter which item to delete.
     * 
    **/
    where: itemWhereUniqueInput
  }


  /**
   * item deleteMany
   */
  export type itemDeleteManyArgs = {
    where?: itemWhereInput
  }


  /**
   * item without action
   */
  export type itemArgs = {
    /**
     * Select specific fields to fetch from the item
     * 
    **/
    select?: itemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: itemInclude | null
  }



  /**
   * Model produto
   */


  export type AggregateProduto = {
    _count: ProdutoCountAggregateOutputType | null
    _avg: ProdutoAvgAggregateOutputType | null
    _sum: ProdutoSumAggregateOutputType | null
    _min: ProdutoMinAggregateOutputType | null
    _max: ProdutoMaxAggregateOutputType | null
  }

  export type ProdutoAvgAggregateOutputType = {
    id_produto: number | null
    valor: number | null
  }

  export type ProdutoSumAggregateOutputType = {
    id_produto: number | null
    valor: number | null
  }

  export type ProdutoMinAggregateOutputType = {
    id_produto: number | null
    nome: string | null
    valor: number | null
  }

  export type ProdutoMaxAggregateOutputType = {
    id_produto: number | null
    nome: string | null
    valor: number | null
  }

  export type ProdutoCountAggregateOutputType = {
    id_produto: number
    nome: number
    valor: number
    _all: number
  }


  export type ProdutoAvgAggregateInputType = {
    id_produto?: true
    valor?: true
  }

  export type ProdutoSumAggregateInputType = {
    id_produto?: true
    valor?: true
  }

  export type ProdutoMinAggregateInputType = {
    id_produto?: true
    nome?: true
    valor?: true
  }

  export type ProdutoMaxAggregateInputType = {
    id_produto?: true
    nome?: true
    valor?: true
  }

  export type ProdutoCountAggregateInputType = {
    id_produto?: true
    nome?: true
    valor?: true
    _all?: true
  }

  export type ProdutoAggregateArgs = {
    /**
     * Filter which produto to aggregate.
     * 
    **/
    where?: produtoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of produtos to fetch.
     * 
    **/
    orderBy?: Enumerable<produtoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: produtoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` produtos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` produtos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned produtos
    **/
    _count?: true | ProdutoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProdutoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProdutoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProdutoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProdutoMaxAggregateInputType
  }

  export type GetProdutoAggregateType<T extends ProdutoAggregateArgs> = {
        [P in keyof T & keyof AggregateProduto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduto[P]>
      : GetScalarType<T[P], AggregateProduto[P]>
  }




  export type ProdutoGroupByArgs = {
    where?: produtoWhereInput
    orderBy?: Enumerable<produtoOrderByWithAggregationInput>
    by: Array<ProdutoScalarFieldEnum>
    having?: produtoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProdutoCountAggregateInputType | true
    _avg?: ProdutoAvgAggregateInputType
    _sum?: ProdutoSumAggregateInputType
    _min?: ProdutoMinAggregateInputType
    _max?: ProdutoMaxAggregateInputType
  }


  export type ProdutoGroupByOutputType = {
    id_produto: number
    nome: string | null
    valor: number | null
    _count: ProdutoCountAggregateOutputType | null
    _avg: ProdutoAvgAggregateOutputType | null
    _sum: ProdutoSumAggregateOutputType | null
    _min: ProdutoMinAggregateOutputType | null
    _max: ProdutoMaxAggregateOutputType | null
  }

  type GetProdutoGroupByPayload<T extends ProdutoGroupByArgs> = Promise<
    Array<
      PickArray<ProdutoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProdutoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProdutoGroupByOutputType[P]>
            : GetScalarType<T[P], ProdutoGroupByOutputType[P]>
        }
      >
    >


  export type produtoSelect = {
    id_produto?: boolean
    nome?: boolean
    valor?: boolean
    item?: boolean | itemFindManyArgs
    _count?: boolean | ProdutoCountOutputTypeArgs
  }

  export type produtoInclude = {
    item?: boolean | itemFindManyArgs
    _count?: boolean | ProdutoCountOutputTypeArgs
  }

  export type produtoGetPayload<
    S extends boolean | null | undefined | produtoArgs,
    U = keyof S
      > = S extends true
        ? produto
    : S extends undefined
    ? never
    : S extends produtoArgs | produtoFindManyArgs
    ?'include' extends U
    ? produto  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'item'
        ? Array < itemGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? ProdutoCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof produto ?produto [P]
  : 
          P extends 'item'
        ? Array < itemGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? ProdutoCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : produto
  : produto


  type produtoCountArgs = Merge<
    Omit<produtoFindManyArgs, 'select' | 'include'> & {
      select?: ProdutoCountAggregateInputType | true
    }
  >

  export interface produtoDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Produto that matches the filter.
     * @param {produtoFindUniqueArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends produtoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, produtoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'produto'> extends True ? CheckSelect<T, Prisma__produtoClient<produto>, Prisma__produtoClient<produtoGetPayload<T>>> : CheckSelect<T, Prisma__produtoClient<produto | null >, Prisma__produtoClient<produtoGetPayload<T> | null >>

    /**
     * Find the first Produto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {produtoFindFirstArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends produtoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, produtoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'produto'> extends True ? CheckSelect<T, Prisma__produtoClient<produto>, Prisma__produtoClient<produtoGetPayload<T>>> : CheckSelect<T, Prisma__produtoClient<produto | null >, Prisma__produtoClient<produtoGetPayload<T> | null >>

    /**
     * Find zero or more Produtos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {produtoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Produtos
     * const produtos = await prisma.produto.findMany()
     * 
     * // Get first 10 Produtos
     * const produtos = await prisma.produto.findMany({ take: 10 })
     * 
     * // Only select the `id_produto`
     * const produtoWithId_produtoOnly = await prisma.produto.findMany({ select: { id_produto: true } })
     * 
    **/
    findMany<T extends produtoFindManyArgs>(
      args?: SelectSubset<T, produtoFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<produto>>, PrismaPromise<Array<produtoGetPayload<T>>>>

    /**
     * Create a Produto.
     * @param {produtoCreateArgs} args - Arguments to create a Produto.
     * @example
     * // Create one Produto
     * const Produto = await prisma.produto.create({
     *   data: {
     *     // ... data to create a Produto
     *   }
     * })
     * 
    **/
    create<T extends produtoCreateArgs>(
      args: SelectSubset<T, produtoCreateArgs>
    ): CheckSelect<T, Prisma__produtoClient<produto>, Prisma__produtoClient<produtoGetPayload<T>>>

    /**
     * Create many Produtos.
     *     @param {produtoCreateManyArgs} args - Arguments to create many Produtos.
     *     @example
     *     // Create many Produtos
     *     const produto = await prisma.produto.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends produtoCreateManyArgs>(
      args?: SelectSubset<T, produtoCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Produto.
     * @param {produtoDeleteArgs} args - Arguments to delete one Produto.
     * @example
     * // Delete one Produto
     * const Produto = await prisma.produto.delete({
     *   where: {
     *     // ... filter to delete one Produto
     *   }
     * })
     * 
    **/
    delete<T extends produtoDeleteArgs>(
      args: SelectSubset<T, produtoDeleteArgs>
    ): CheckSelect<T, Prisma__produtoClient<produto>, Prisma__produtoClient<produtoGetPayload<T>>>

    /**
     * Update one Produto.
     * @param {produtoUpdateArgs} args - Arguments to update one Produto.
     * @example
     * // Update one Produto
     * const produto = await prisma.produto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends produtoUpdateArgs>(
      args: SelectSubset<T, produtoUpdateArgs>
    ): CheckSelect<T, Prisma__produtoClient<produto>, Prisma__produtoClient<produtoGetPayload<T>>>

    /**
     * Delete zero or more Produtos.
     * @param {produtoDeleteManyArgs} args - Arguments to filter Produtos to delete.
     * @example
     * // Delete a few Produtos
     * const { count } = await prisma.produto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends produtoDeleteManyArgs>(
      args?: SelectSubset<T, produtoDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {produtoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Produtos
     * const produto = await prisma.produto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends produtoUpdateManyArgs>(
      args: SelectSubset<T, produtoUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Produto.
     * @param {produtoUpsertArgs} args - Arguments to update or create a Produto.
     * @example
     * // Update or create a Produto
     * const produto = await prisma.produto.upsert({
     *   create: {
     *     // ... data to create a Produto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Produto we want to update
     *   }
     * })
    **/
    upsert<T extends produtoUpsertArgs>(
      args: SelectSubset<T, produtoUpsertArgs>
    ): CheckSelect<T, Prisma__produtoClient<produto>, Prisma__produtoClient<produtoGetPayload<T>>>

    /**
     * Count the number of Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {produtoCountArgs} args - Arguments to filter Produtos to count.
     * @example
     * // Count the number of Produtos
     * const count = await prisma.produto.count({
     *   where: {
     *     // ... the filter for the Produtos we want to count
     *   }
     * })
    **/
    count<T extends produtoCountArgs>(
      args?: Subset<T, produtoCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProdutoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Produto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProdutoAggregateArgs>(args: Subset<T, ProdutoAggregateArgs>): PrismaPromise<GetProdutoAggregateType<T>>

    /**
     * Group by Produto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProdutoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProdutoGroupByArgs['orderBy'] }
        : { orderBy?: ProdutoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProdutoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProdutoGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for produto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__produtoClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    item<T extends itemFindManyArgs = {}>(args?: Subset<T, itemFindManyArgs>): CheckSelect<T, PrismaPromise<Array<item>>, PrismaPromise<Array<itemGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * produto findUnique
   */
  export type produtoFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the produto
     * 
    **/
    select?: produtoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: produtoInclude | null
    /**
     * Throw an Error if a produto can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which produto to fetch.
     * 
    **/
    where: produtoWhereUniqueInput
  }


  /**
   * produto findFirst
   */
  export type produtoFindFirstArgs = {
    /**
     * Select specific fields to fetch from the produto
     * 
    **/
    select?: produtoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: produtoInclude | null
    /**
     * Throw an Error if a produto can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which produto to fetch.
     * 
    **/
    where?: produtoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of produtos to fetch.
     * 
    **/
    orderBy?: Enumerable<produtoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for produtos.
     * 
    **/
    cursor?: produtoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` produtos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` produtos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of produtos.
     * 
    **/
    distinct?: Enumerable<ProdutoScalarFieldEnum>
  }


  /**
   * produto findMany
   */
  export type produtoFindManyArgs = {
    /**
     * Select specific fields to fetch from the produto
     * 
    **/
    select?: produtoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: produtoInclude | null
    /**
     * Filter, which produtos to fetch.
     * 
    **/
    where?: produtoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of produtos to fetch.
     * 
    **/
    orderBy?: Enumerable<produtoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing produtos.
     * 
    **/
    cursor?: produtoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` produtos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` produtos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProdutoScalarFieldEnum>
  }


  /**
   * produto create
   */
  export type produtoCreateArgs = {
    /**
     * Select specific fields to fetch from the produto
     * 
    **/
    select?: produtoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: produtoInclude | null
    /**
     * The data needed to create a produto.
     * 
    **/
    data: XOR<produtoCreateInput, produtoUncheckedCreateInput>
  }


  /**
   * produto createMany
   */
  export type produtoCreateManyArgs = {
    data: Enumerable<produtoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * produto update
   */
  export type produtoUpdateArgs = {
    /**
     * Select specific fields to fetch from the produto
     * 
    **/
    select?: produtoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: produtoInclude | null
    /**
     * The data needed to update a produto.
     * 
    **/
    data: XOR<produtoUpdateInput, produtoUncheckedUpdateInput>
    /**
     * Choose, which produto to update.
     * 
    **/
    where: produtoWhereUniqueInput
  }


  /**
   * produto updateMany
   */
  export type produtoUpdateManyArgs = {
    data: XOR<produtoUpdateManyMutationInput, produtoUncheckedUpdateManyInput>
    where?: produtoWhereInput
  }


  /**
   * produto upsert
   */
  export type produtoUpsertArgs = {
    /**
     * Select specific fields to fetch from the produto
     * 
    **/
    select?: produtoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: produtoInclude | null
    /**
     * The filter to search for the produto to update in case it exists.
     * 
    **/
    where: produtoWhereUniqueInput
    /**
     * In case the produto found by the `where` argument doesn't exist, create a new produto with this data.
     * 
    **/
    create: XOR<produtoCreateInput, produtoUncheckedCreateInput>
    /**
     * In case the produto was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<produtoUpdateInput, produtoUncheckedUpdateInput>
  }


  /**
   * produto delete
   */
  export type produtoDeleteArgs = {
    /**
     * Select specific fields to fetch from the produto
     * 
    **/
    select?: produtoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: produtoInclude | null
    /**
     * Filter which produto to delete.
     * 
    **/
    where: produtoWhereUniqueInput
  }


  /**
   * produto deleteMany
   */
  export type produtoDeleteManyArgs = {
    where?: produtoWhereInput
  }


  /**
   * produto without action
   */
  export type produtoArgs = {
    /**
     * Select specific fields to fetch from the produto
     * 
    **/
    select?: produtoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: produtoInclude | null
  }



  /**
   * Model venda
   */


  export type AggregateVenda = {
    _count: VendaCountAggregateOutputType | null
    _avg: VendaAvgAggregateOutputType | null
    _sum: VendaSumAggregateOutputType | null
    _min: VendaMinAggregateOutputType | null
    _max: VendaMaxAggregateOutputType | null
  }

  export type VendaAvgAggregateOutputType = {
    id_venda: number | null
    frete: number | null
    total: number | null
    id_cliente: number | null
  }

  export type VendaSumAggregateOutputType = {
    id_venda: number | null
    frete: number | null
    total: number | null
    id_cliente: number | null
  }

  export type VendaMinAggregateOutputType = {
    id_venda: number | null
    frete: number | null
    total: number | null
    id_cliente: number | null
    dataCadastro: Date | null
  }

  export type VendaMaxAggregateOutputType = {
    id_venda: number | null
    frete: number | null
    total: number | null
    id_cliente: number | null
    dataCadastro: Date | null
  }

  export type VendaCountAggregateOutputType = {
    id_venda: number
    frete: number
    total: number
    id_cliente: number
    dataCadastro: number
    _all: number
  }


  export type VendaAvgAggregateInputType = {
    id_venda?: true
    frete?: true
    total?: true
    id_cliente?: true
  }

  export type VendaSumAggregateInputType = {
    id_venda?: true
    frete?: true
    total?: true
    id_cliente?: true
  }

  export type VendaMinAggregateInputType = {
    id_venda?: true
    frete?: true
    total?: true
    id_cliente?: true
    dataCadastro?: true
  }

  export type VendaMaxAggregateInputType = {
    id_venda?: true
    frete?: true
    total?: true
    id_cliente?: true
    dataCadastro?: true
  }

  export type VendaCountAggregateInputType = {
    id_venda?: true
    frete?: true
    total?: true
    id_cliente?: true
    dataCadastro?: true
    _all?: true
  }

  export type VendaAggregateArgs = {
    /**
     * Filter which venda to aggregate.
     * 
    **/
    where?: vendaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of vendas to fetch.
     * 
    **/
    orderBy?: Enumerable<vendaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: vendaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` vendas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` vendas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned vendas
    **/
    _count?: true | VendaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VendaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VendaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VendaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VendaMaxAggregateInputType
  }

  export type GetVendaAggregateType<T extends VendaAggregateArgs> = {
        [P in keyof T & keyof AggregateVenda]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVenda[P]>
      : GetScalarType<T[P], AggregateVenda[P]>
  }




  export type VendaGroupByArgs = {
    where?: vendaWhereInput
    orderBy?: Enumerable<vendaOrderByWithAggregationInput>
    by: Array<VendaScalarFieldEnum>
    having?: vendaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VendaCountAggregateInputType | true
    _avg?: VendaAvgAggregateInputType
    _sum?: VendaSumAggregateInputType
    _min?: VendaMinAggregateInputType
    _max?: VendaMaxAggregateInputType
  }


  export type VendaGroupByOutputType = {
    id_venda: number
    frete: number | null
    total: number | null
    id_cliente: number | null
    dataCadastro: Date | null
    _count: VendaCountAggregateOutputType | null
    _avg: VendaAvgAggregateOutputType | null
    _sum: VendaSumAggregateOutputType | null
    _min: VendaMinAggregateOutputType | null
    _max: VendaMaxAggregateOutputType | null
  }

  type GetVendaGroupByPayload<T extends VendaGroupByArgs> = Promise<
    Array<
      PickArray<VendaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VendaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VendaGroupByOutputType[P]>
            : GetScalarType<T[P], VendaGroupByOutputType[P]>
        }
      >
    >


  export type vendaSelect = {
    id_venda?: boolean
    frete?: boolean
    total?: boolean
    id_cliente?: boolean
    dataCadastro?: boolean
    cliente?: boolean | clienteArgs
    item?: boolean | itemFindManyArgs
    _count?: boolean | VendaCountOutputTypeArgs
  }

  export type vendaInclude = {
    cliente?: boolean | clienteArgs
    item?: boolean | itemFindManyArgs
    _count?: boolean | VendaCountOutputTypeArgs
  }

  export type vendaGetPayload<
    S extends boolean | null | undefined | vendaArgs,
    U = keyof S
      > = S extends true
        ? venda
    : S extends undefined
    ? never
    : S extends vendaArgs | vendaFindManyArgs
    ?'include' extends U
    ? venda  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'cliente'
        ? clienteGetPayload<S['include'][P]> | null :
        P extends 'item'
        ? Array < itemGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? VendaCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof venda ?venda [P]
  : 
          P extends 'cliente'
        ? clienteGetPayload<S['select'][P]> | null :
        P extends 'item'
        ? Array < itemGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? VendaCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : venda
  : venda


  type vendaCountArgs = Merge<
    Omit<vendaFindManyArgs, 'select' | 'include'> & {
      select?: VendaCountAggregateInputType | true
    }
  >

  export interface vendaDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Venda that matches the filter.
     * @param {vendaFindUniqueArgs} args - Arguments to find a Venda
     * @example
     * // Get one Venda
     * const venda = await prisma.venda.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends vendaFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, vendaFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'venda'> extends True ? CheckSelect<T, Prisma__vendaClient<venda>, Prisma__vendaClient<vendaGetPayload<T>>> : CheckSelect<T, Prisma__vendaClient<venda | null >, Prisma__vendaClient<vendaGetPayload<T> | null >>

    /**
     * Find the first Venda that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {vendaFindFirstArgs} args - Arguments to find a Venda
     * @example
     * // Get one Venda
     * const venda = await prisma.venda.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends vendaFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, vendaFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'venda'> extends True ? CheckSelect<T, Prisma__vendaClient<venda>, Prisma__vendaClient<vendaGetPayload<T>>> : CheckSelect<T, Prisma__vendaClient<venda | null >, Prisma__vendaClient<vendaGetPayload<T> | null >>

    /**
     * Find zero or more Vendas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {vendaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vendas
     * const vendas = await prisma.venda.findMany()
     * 
     * // Get first 10 Vendas
     * const vendas = await prisma.venda.findMany({ take: 10 })
     * 
     * // Only select the `id_venda`
     * const vendaWithId_vendaOnly = await prisma.venda.findMany({ select: { id_venda: true } })
     * 
    **/
    findMany<T extends vendaFindManyArgs>(
      args?: SelectSubset<T, vendaFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<venda>>, PrismaPromise<Array<vendaGetPayload<T>>>>

    /**
     * Create a Venda.
     * @param {vendaCreateArgs} args - Arguments to create a Venda.
     * @example
     * // Create one Venda
     * const Venda = await prisma.venda.create({
     *   data: {
     *     // ... data to create a Venda
     *   }
     * })
     * 
    **/
    create<T extends vendaCreateArgs>(
      args: SelectSubset<T, vendaCreateArgs>
    ): CheckSelect<T, Prisma__vendaClient<venda>, Prisma__vendaClient<vendaGetPayload<T>>>

    /**
     * Create many Vendas.
     *     @param {vendaCreateManyArgs} args - Arguments to create many Vendas.
     *     @example
     *     // Create many Vendas
     *     const venda = await prisma.venda.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends vendaCreateManyArgs>(
      args?: SelectSubset<T, vendaCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Venda.
     * @param {vendaDeleteArgs} args - Arguments to delete one Venda.
     * @example
     * // Delete one Venda
     * const Venda = await prisma.venda.delete({
     *   where: {
     *     // ... filter to delete one Venda
     *   }
     * })
     * 
    **/
    delete<T extends vendaDeleteArgs>(
      args: SelectSubset<T, vendaDeleteArgs>
    ): CheckSelect<T, Prisma__vendaClient<venda>, Prisma__vendaClient<vendaGetPayload<T>>>

    /**
     * Update one Venda.
     * @param {vendaUpdateArgs} args - Arguments to update one Venda.
     * @example
     * // Update one Venda
     * const venda = await prisma.venda.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends vendaUpdateArgs>(
      args: SelectSubset<T, vendaUpdateArgs>
    ): CheckSelect<T, Prisma__vendaClient<venda>, Prisma__vendaClient<vendaGetPayload<T>>>

    /**
     * Delete zero or more Vendas.
     * @param {vendaDeleteManyArgs} args - Arguments to filter Vendas to delete.
     * @example
     * // Delete a few Vendas
     * const { count } = await prisma.venda.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends vendaDeleteManyArgs>(
      args?: SelectSubset<T, vendaDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vendas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {vendaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vendas
     * const venda = await prisma.venda.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends vendaUpdateManyArgs>(
      args: SelectSubset<T, vendaUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Venda.
     * @param {vendaUpsertArgs} args - Arguments to update or create a Venda.
     * @example
     * // Update or create a Venda
     * const venda = await prisma.venda.upsert({
     *   create: {
     *     // ... data to create a Venda
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Venda we want to update
     *   }
     * })
    **/
    upsert<T extends vendaUpsertArgs>(
      args: SelectSubset<T, vendaUpsertArgs>
    ): CheckSelect<T, Prisma__vendaClient<venda>, Prisma__vendaClient<vendaGetPayload<T>>>

    /**
     * Count the number of Vendas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {vendaCountArgs} args - Arguments to filter Vendas to count.
     * @example
     * // Count the number of Vendas
     * const count = await prisma.venda.count({
     *   where: {
     *     // ... the filter for the Vendas we want to count
     *   }
     * })
    **/
    count<T extends vendaCountArgs>(
      args?: Subset<T, vendaCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VendaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Venda.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VendaAggregateArgs>(args: Subset<T, VendaAggregateArgs>): PrismaPromise<GetVendaAggregateType<T>>

    /**
     * Group by Venda.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VendaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VendaGroupByArgs['orderBy'] }
        : { orderBy?: VendaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VendaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVendaGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for venda.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__vendaClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    cliente<T extends clienteArgs = {}>(args?: Subset<T, clienteArgs>): CheckSelect<T, Prisma__clienteClient<cliente | null >, Prisma__clienteClient<clienteGetPayload<T> | null >>;

    item<T extends itemFindManyArgs = {}>(args?: Subset<T, itemFindManyArgs>): CheckSelect<T, PrismaPromise<Array<item>>, PrismaPromise<Array<itemGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * venda findUnique
   */
  export type vendaFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the venda
     * 
    **/
    select?: vendaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: vendaInclude | null
    /**
     * Throw an Error if a venda can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which venda to fetch.
     * 
    **/
    where: vendaWhereUniqueInput
  }


  /**
   * venda findFirst
   */
  export type vendaFindFirstArgs = {
    /**
     * Select specific fields to fetch from the venda
     * 
    **/
    select?: vendaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: vendaInclude | null
    /**
     * Throw an Error if a venda can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which venda to fetch.
     * 
    **/
    where?: vendaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of vendas to fetch.
     * 
    **/
    orderBy?: Enumerable<vendaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for vendas.
     * 
    **/
    cursor?: vendaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` vendas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` vendas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of vendas.
     * 
    **/
    distinct?: Enumerable<VendaScalarFieldEnum>
  }


  /**
   * venda findMany
   */
  export type vendaFindManyArgs = {
    /**
     * Select specific fields to fetch from the venda
     * 
    **/
    select?: vendaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: vendaInclude | null
    /**
     * Filter, which vendas to fetch.
     * 
    **/
    where?: vendaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of vendas to fetch.
     * 
    **/
    orderBy?: Enumerable<vendaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing vendas.
     * 
    **/
    cursor?: vendaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` vendas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` vendas.
     * 
    **/
    skip?: number
    distinct?: Enumerable<VendaScalarFieldEnum>
  }


  /**
   * venda create
   */
  export type vendaCreateArgs = {
    /**
     * Select specific fields to fetch from the venda
     * 
    **/
    select?: vendaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: vendaInclude | null
    /**
     * The data needed to create a venda.
     * 
    **/
    data: XOR<vendaCreateInput, vendaUncheckedCreateInput>
  }


  /**
   * venda createMany
   */
  export type vendaCreateManyArgs = {
    data: Enumerable<vendaCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * venda update
   */
  export type vendaUpdateArgs = {
    /**
     * Select specific fields to fetch from the venda
     * 
    **/
    select?: vendaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: vendaInclude | null
    /**
     * The data needed to update a venda.
     * 
    **/
    data: XOR<vendaUpdateInput, vendaUncheckedUpdateInput>
    /**
     * Choose, which venda to update.
     * 
    **/
    where: vendaWhereUniqueInput
  }


  /**
   * venda updateMany
   */
  export type vendaUpdateManyArgs = {
    data: XOR<vendaUpdateManyMutationInput, vendaUncheckedUpdateManyInput>
    where?: vendaWhereInput
  }


  /**
   * venda upsert
   */
  export type vendaUpsertArgs = {
    /**
     * Select specific fields to fetch from the venda
     * 
    **/
    select?: vendaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: vendaInclude | null
    /**
     * The filter to search for the venda to update in case it exists.
     * 
    **/
    where: vendaWhereUniqueInput
    /**
     * In case the venda found by the `where` argument doesn't exist, create a new venda with this data.
     * 
    **/
    create: XOR<vendaCreateInput, vendaUncheckedCreateInput>
    /**
     * In case the venda was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<vendaUpdateInput, vendaUncheckedUpdateInput>
  }


  /**
   * venda delete
   */
  export type vendaDeleteArgs = {
    /**
     * Select specific fields to fetch from the venda
     * 
    **/
    select?: vendaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: vendaInclude | null
    /**
     * Filter which venda to delete.
     * 
    **/
    where: vendaWhereUniqueInput
  }


  /**
   * venda deleteMany
   */
  export type vendaDeleteManyArgs = {
    where?: vendaWhereInput
  }


  /**
   * venda without action
   */
  export type vendaArgs = {
    /**
     * Select specific fields to fetch from the venda
     * 
    **/
    select?: vendaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: vendaInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ClienteScalarFieldEnum: {
    id_cliente: 'id_cliente',
    nome: 'nome'
  };

  export type ClienteScalarFieldEnum = (typeof ClienteScalarFieldEnum)[keyof typeof ClienteScalarFieldEnum]


  export const ItemScalarFieldEnum: {
    id_item: 'id_item',
    valor: 'valor',
    id_produto: 'id_produto',
    id_venda: 'id_venda'
  };

  export type ItemScalarFieldEnum = (typeof ItemScalarFieldEnum)[keyof typeof ItemScalarFieldEnum]


  export const ProdutoScalarFieldEnum: {
    id_produto: 'id_produto',
    nome: 'nome',
    valor: 'valor'
  };

  export type ProdutoScalarFieldEnum = (typeof ProdutoScalarFieldEnum)[keyof typeof ProdutoScalarFieldEnum]


  export const VendaScalarFieldEnum: {
    id_venda: 'id_venda',
    frete: 'frete',
    total: 'total',
    id_cliente: 'id_cliente',
    dataCadastro: 'dataCadastro'
  };

  export type VendaScalarFieldEnum = (typeof VendaScalarFieldEnum)[keyof typeof VendaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type clienteWhereInput = {
    AND?: Enumerable<clienteWhereInput>
    OR?: Enumerable<clienteWhereInput>
    NOT?: Enumerable<clienteWhereInput>
    id_cliente?: IntFilter | number
    nome?: StringNullableFilter | string | null
    venda?: VendaListRelationFilter
  }

  export type clienteOrderByWithRelationInput = {
    id_cliente?: SortOrder
    nome?: SortOrder
    venda?: vendaOrderByRelationAggregateInput
  }

  export type clienteWhereUniqueInput = {
    id_cliente?: number
  }

  export type clienteOrderByWithAggregationInput = {
    id_cliente?: SortOrder
    nome?: SortOrder
    _count?: clienteCountOrderByAggregateInput
    _avg?: clienteAvgOrderByAggregateInput
    _max?: clienteMaxOrderByAggregateInput
    _min?: clienteMinOrderByAggregateInput
    _sum?: clienteSumOrderByAggregateInput
  }

  export type clienteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<clienteScalarWhereWithAggregatesInput>
    OR?: Enumerable<clienteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<clienteScalarWhereWithAggregatesInput>
    id_cliente?: IntWithAggregatesFilter | number
    nome?: StringNullableWithAggregatesFilter | string | null
  }

  export type itemWhereInput = {
    AND?: Enumerable<itemWhereInput>
    OR?: Enumerable<itemWhereInput>
    NOT?: Enumerable<itemWhereInput>
    id_item?: IntFilter | number
    valor?: FloatNullableFilter | number | null
    id_produto?: IntNullableFilter | number | null
    id_venda?: IntNullableFilter | number | null
    produto?: XOR<ProdutoRelationFilter, produtoWhereInput> | null
    venda?: XOR<VendaRelationFilter, vendaWhereInput> | null
  }

  export type itemOrderByWithRelationInput = {
    id_item?: SortOrder
    valor?: SortOrder
    id_produto?: SortOrder
    id_venda?: SortOrder
    produto?: produtoOrderByWithRelationInput
    venda?: vendaOrderByWithRelationInput
  }

  export type itemWhereUniqueInput = {
    id_item?: number
  }

  export type itemOrderByWithAggregationInput = {
    id_item?: SortOrder
    valor?: SortOrder
    id_produto?: SortOrder
    id_venda?: SortOrder
    _count?: itemCountOrderByAggregateInput
    _avg?: itemAvgOrderByAggregateInput
    _max?: itemMaxOrderByAggregateInput
    _min?: itemMinOrderByAggregateInput
    _sum?: itemSumOrderByAggregateInput
  }

  export type itemScalarWhereWithAggregatesInput = {
    AND?: Enumerable<itemScalarWhereWithAggregatesInput>
    OR?: Enumerable<itemScalarWhereWithAggregatesInput>
    NOT?: Enumerable<itemScalarWhereWithAggregatesInput>
    id_item?: IntWithAggregatesFilter | number
    valor?: FloatNullableWithAggregatesFilter | number | null
    id_produto?: IntNullableWithAggregatesFilter | number | null
    id_venda?: IntNullableWithAggregatesFilter | number | null
  }

  export type produtoWhereInput = {
    AND?: Enumerable<produtoWhereInput>
    OR?: Enumerable<produtoWhereInput>
    NOT?: Enumerable<produtoWhereInput>
    id_produto?: IntFilter | number
    nome?: StringNullableFilter | string | null
    valor?: FloatNullableFilter | number | null
    item?: ItemListRelationFilter
  }

  export type produtoOrderByWithRelationInput = {
    id_produto?: SortOrder
    nome?: SortOrder
    valor?: SortOrder
    item?: itemOrderByRelationAggregateInput
  }

  export type produtoWhereUniqueInput = {
    id_produto?: number
  }

  export type produtoOrderByWithAggregationInput = {
    id_produto?: SortOrder
    nome?: SortOrder
    valor?: SortOrder
    _count?: produtoCountOrderByAggregateInput
    _avg?: produtoAvgOrderByAggregateInput
    _max?: produtoMaxOrderByAggregateInput
    _min?: produtoMinOrderByAggregateInput
    _sum?: produtoSumOrderByAggregateInput
  }

  export type produtoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<produtoScalarWhereWithAggregatesInput>
    OR?: Enumerable<produtoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<produtoScalarWhereWithAggregatesInput>
    id_produto?: IntWithAggregatesFilter | number
    nome?: StringNullableWithAggregatesFilter | string | null
    valor?: FloatNullableWithAggregatesFilter | number | null
  }

  export type vendaWhereInput = {
    AND?: Enumerable<vendaWhereInput>
    OR?: Enumerable<vendaWhereInput>
    NOT?: Enumerable<vendaWhereInput>
    id_venda?: IntFilter | number
    frete?: FloatNullableFilter | number | null
    total?: FloatNullableFilter | number | null
    id_cliente?: IntNullableFilter | number | null
    dataCadastro?: DateTimeNullableFilter | Date | string | null
    cliente?: XOR<ClienteRelationFilter, clienteWhereInput> | null
    item?: ItemListRelationFilter
  }

  export type vendaOrderByWithRelationInput = {
    id_venda?: SortOrder
    frete?: SortOrder
    total?: SortOrder
    id_cliente?: SortOrder
    dataCadastro?: SortOrder
    cliente?: clienteOrderByWithRelationInput
    item?: itemOrderByRelationAggregateInput
  }

  export type vendaWhereUniqueInput = {
    id_venda?: number
  }

  export type vendaOrderByWithAggregationInput = {
    id_venda?: SortOrder
    frete?: SortOrder
    total?: SortOrder
    id_cliente?: SortOrder
    dataCadastro?: SortOrder
    _count?: vendaCountOrderByAggregateInput
    _avg?: vendaAvgOrderByAggregateInput
    _max?: vendaMaxOrderByAggregateInput
    _min?: vendaMinOrderByAggregateInput
    _sum?: vendaSumOrderByAggregateInput
  }

  export type vendaScalarWhereWithAggregatesInput = {
    AND?: Enumerable<vendaScalarWhereWithAggregatesInput>
    OR?: Enumerable<vendaScalarWhereWithAggregatesInput>
    NOT?: Enumerable<vendaScalarWhereWithAggregatesInput>
    id_venda?: IntWithAggregatesFilter | number
    frete?: FloatNullableWithAggregatesFilter | number | null
    total?: FloatNullableWithAggregatesFilter | number | null
    id_cliente?: IntNullableWithAggregatesFilter | number | null
    dataCadastro?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type clienteCreateInput = {
    id_cliente: number
    nome?: string | null
    venda?: vendaCreateNestedManyWithoutClienteInput
  }

  export type clienteUncheckedCreateInput = {
    id_cliente: number
    nome?: string | null
    venda?: vendaUncheckedCreateNestedManyWithoutClienteInput
  }

  export type clienteUpdateInput = {
    id_cliente?: IntFieldUpdateOperationsInput | number
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    venda?: vendaUpdateManyWithoutClienteInput
  }

  export type clienteUncheckedUpdateInput = {
    id_cliente?: IntFieldUpdateOperationsInput | number
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    venda?: vendaUncheckedUpdateManyWithoutClienteInput
  }

  export type clienteCreateManyInput = {
    id_cliente: number
    nome?: string | null
  }

  export type clienteUpdateManyMutationInput = {
    id_cliente?: IntFieldUpdateOperationsInput | number
    nome?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type clienteUncheckedUpdateManyInput = {
    id_cliente?: IntFieldUpdateOperationsInput | number
    nome?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type itemCreateInput = {
    valor?: number | null
    produto?: produtoCreateNestedOneWithoutItemInput
    venda?: vendaCreateNestedOneWithoutItemInput
  }

  export type itemUncheckedCreateInput = {
    id_item?: number
    valor?: number | null
    id_produto?: number | null
    id_venda?: number | null
  }

  export type itemUpdateInput = {
    valor?: NullableFloatFieldUpdateOperationsInput | number | null
    produto?: produtoUpdateOneWithoutItemInput
    venda?: vendaUpdateOneWithoutItemInput
  }

  export type itemUncheckedUpdateInput = {
    id_item?: IntFieldUpdateOperationsInput | number
    valor?: NullableFloatFieldUpdateOperationsInput | number | null
    id_produto?: NullableIntFieldUpdateOperationsInput | number | null
    id_venda?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type itemCreateManyInput = {
    id_item?: number
    valor?: number | null
    id_produto?: number | null
    id_venda?: number | null
  }

  export type itemUpdateManyMutationInput = {
    valor?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type itemUncheckedUpdateManyInput = {
    id_item?: IntFieldUpdateOperationsInput | number
    valor?: NullableFloatFieldUpdateOperationsInput | number | null
    id_produto?: NullableIntFieldUpdateOperationsInput | number | null
    id_venda?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type produtoCreateInput = {
    id_produto: number
    nome?: string | null
    valor?: number | null
    item?: itemCreateNestedManyWithoutProdutoInput
  }

  export type produtoUncheckedCreateInput = {
    id_produto: number
    nome?: string | null
    valor?: number | null
    item?: itemUncheckedCreateNestedManyWithoutProdutoInput
  }

  export type produtoUpdateInput = {
    id_produto?: IntFieldUpdateOperationsInput | number
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    valor?: NullableFloatFieldUpdateOperationsInput | number | null
    item?: itemUpdateManyWithoutProdutoInput
  }

  export type produtoUncheckedUpdateInput = {
    id_produto?: IntFieldUpdateOperationsInput | number
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    valor?: NullableFloatFieldUpdateOperationsInput | number | null
    item?: itemUncheckedUpdateManyWithoutProdutoInput
  }

  export type produtoCreateManyInput = {
    id_produto: number
    nome?: string | null
    valor?: number | null
  }

  export type produtoUpdateManyMutationInput = {
    id_produto?: IntFieldUpdateOperationsInput | number
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    valor?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type produtoUncheckedUpdateManyInput = {
    id_produto?: IntFieldUpdateOperationsInput | number
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    valor?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type vendaCreateInput = {
    frete?: number | null
    total?: number | null
    dataCadastro?: Date | string | null
    cliente?: clienteCreateNestedOneWithoutVendaInput
    item?: itemCreateNestedManyWithoutVendaInput
  }

  export type vendaUncheckedCreateInput = {
    id_venda?: number
    frete?: number | null
    total?: number | null
    id_cliente?: number | null
    dataCadastro?: Date | string | null
    item?: itemUncheckedCreateNestedManyWithoutVendaInput
  }

  export type vendaUpdateInput = {
    frete?: NullableFloatFieldUpdateOperationsInput | number | null
    total?: NullableFloatFieldUpdateOperationsInput | number | null
    dataCadastro?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente?: clienteUpdateOneWithoutVendaInput
    item?: itemUpdateManyWithoutVendaInput
  }

  export type vendaUncheckedUpdateInput = {
    id_venda?: IntFieldUpdateOperationsInput | number
    frete?: NullableFloatFieldUpdateOperationsInput | number | null
    total?: NullableFloatFieldUpdateOperationsInput | number | null
    id_cliente?: NullableIntFieldUpdateOperationsInput | number | null
    dataCadastro?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    item?: itemUncheckedUpdateManyWithoutVendaInput
  }

  export type vendaCreateManyInput = {
    id_venda?: number
    frete?: number | null
    total?: number | null
    id_cliente?: number | null
    dataCadastro?: Date | string | null
  }

  export type vendaUpdateManyMutationInput = {
    frete?: NullableFloatFieldUpdateOperationsInput | number | null
    total?: NullableFloatFieldUpdateOperationsInput | number | null
    dataCadastro?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type vendaUncheckedUpdateManyInput = {
    id_venda?: IntFieldUpdateOperationsInput | number
    frete?: NullableFloatFieldUpdateOperationsInput | number | null
    total?: NullableFloatFieldUpdateOperationsInput | number | null
    id_cliente?: NullableIntFieldUpdateOperationsInput | number | null
    dataCadastro?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type VendaListRelationFilter = {
    every?: vendaWhereInput
    some?: vendaWhereInput
    none?: vendaWhereInput
  }

  export type vendaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type clienteCountOrderByAggregateInput = {
    id_cliente?: SortOrder
    nome?: SortOrder
  }

  export type clienteAvgOrderByAggregateInput = {
    id_cliente?: SortOrder
  }

  export type clienteMaxOrderByAggregateInput = {
    id_cliente?: SortOrder
    nome?: SortOrder
  }

  export type clienteMinOrderByAggregateInput = {
    id_cliente?: SortOrder
    nome?: SortOrder
  }

  export type clienteSumOrderByAggregateInput = {
    id_cliente?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type FloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type ProdutoRelationFilter = {
    is?: produtoWhereInput | null
    isNot?: produtoWhereInput | null
  }

  export type VendaRelationFilter = {
    is?: vendaWhereInput | null
    isNot?: vendaWhereInput | null
  }

  export type itemCountOrderByAggregateInput = {
    id_item?: SortOrder
    valor?: SortOrder
    id_produto?: SortOrder
    id_venda?: SortOrder
  }

  export type itemAvgOrderByAggregateInput = {
    id_item?: SortOrder
    valor?: SortOrder
    id_produto?: SortOrder
    id_venda?: SortOrder
  }

  export type itemMaxOrderByAggregateInput = {
    id_item?: SortOrder
    valor?: SortOrder
    id_produto?: SortOrder
    id_venda?: SortOrder
  }

  export type itemMinOrderByAggregateInput = {
    id_item?: SortOrder
    valor?: SortOrder
    id_produto?: SortOrder
    id_venda?: SortOrder
  }

  export type itemSumOrderByAggregateInput = {
    id_item?: SortOrder
    valor?: SortOrder
    id_produto?: SortOrder
    id_venda?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type ItemListRelationFilter = {
    every?: itemWhereInput
    some?: itemWhereInput
    none?: itemWhereInput
  }

  export type itemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type produtoCountOrderByAggregateInput = {
    id_produto?: SortOrder
    nome?: SortOrder
    valor?: SortOrder
  }

  export type produtoAvgOrderByAggregateInput = {
    id_produto?: SortOrder
    valor?: SortOrder
  }

  export type produtoMaxOrderByAggregateInput = {
    id_produto?: SortOrder
    nome?: SortOrder
    valor?: SortOrder
  }

  export type produtoMinOrderByAggregateInput = {
    id_produto?: SortOrder
    nome?: SortOrder
    valor?: SortOrder
  }

  export type produtoSumOrderByAggregateInput = {
    id_produto?: SortOrder
    valor?: SortOrder
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type ClienteRelationFilter = {
    is?: clienteWhereInput | null
    isNot?: clienteWhereInput | null
  }

  export type vendaCountOrderByAggregateInput = {
    id_venda?: SortOrder
    frete?: SortOrder
    total?: SortOrder
    id_cliente?: SortOrder
    dataCadastro?: SortOrder
  }

  export type vendaAvgOrderByAggregateInput = {
    id_venda?: SortOrder
    frete?: SortOrder
    total?: SortOrder
    id_cliente?: SortOrder
  }

  export type vendaMaxOrderByAggregateInput = {
    id_venda?: SortOrder
    frete?: SortOrder
    total?: SortOrder
    id_cliente?: SortOrder
    dataCadastro?: SortOrder
  }

  export type vendaMinOrderByAggregateInput = {
    id_venda?: SortOrder
    frete?: SortOrder
    total?: SortOrder
    id_cliente?: SortOrder
    dataCadastro?: SortOrder
  }

  export type vendaSumOrderByAggregateInput = {
    id_venda?: SortOrder
    frete?: SortOrder
    total?: SortOrder
    id_cliente?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type vendaCreateNestedManyWithoutClienteInput = {
    create?: XOR<Enumerable<vendaCreateWithoutClienteInput>, Enumerable<vendaUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<vendaCreateOrConnectWithoutClienteInput>
    createMany?: vendaCreateManyClienteInputEnvelope
    connect?: Enumerable<vendaWhereUniqueInput>
  }

  export type vendaUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<Enumerable<vendaCreateWithoutClienteInput>, Enumerable<vendaUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<vendaCreateOrConnectWithoutClienteInput>
    createMany?: vendaCreateManyClienteInputEnvelope
    connect?: Enumerable<vendaWhereUniqueInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type vendaUpdateManyWithoutClienteInput = {
    create?: XOR<Enumerable<vendaCreateWithoutClienteInput>, Enumerable<vendaUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<vendaCreateOrConnectWithoutClienteInput>
    upsert?: Enumerable<vendaUpsertWithWhereUniqueWithoutClienteInput>
    createMany?: vendaCreateManyClienteInputEnvelope
    set?: Enumerable<vendaWhereUniqueInput>
    disconnect?: Enumerable<vendaWhereUniqueInput>
    delete?: Enumerable<vendaWhereUniqueInput>
    connect?: Enumerable<vendaWhereUniqueInput>
    update?: Enumerable<vendaUpdateWithWhereUniqueWithoutClienteInput>
    updateMany?: Enumerable<vendaUpdateManyWithWhereWithoutClienteInput>
    deleteMany?: Enumerable<vendaScalarWhereInput>
  }

  export type vendaUncheckedUpdateManyWithoutClienteInput = {
    create?: XOR<Enumerable<vendaCreateWithoutClienteInput>, Enumerable<vendaUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<vendaCreateOrConnectWithoutClienteInput>
    upsert?: Enumerable<vendaUpsertWithWhereUniqueWithoutClienteInput>
    createMany?: vendaCreateManyClienteInputEnvelope
    set?: Enumerable<vendaWhereUniqueInput>
    disconnect?: Enumerable<vendaWhereUniqueInput>
    delete?: Enumerable<vendaWhereUniqueInput>
    connect?: Enumerable<vendaWhereUniqueInput>
    update?: Enumerable<vendaUpdateWithWhereUniqueWithoutClienteInput>
    updateMany?: Enumerable<vendaUpdateManyWithWhereWithoutClienteInput>
    deleteMany?: Enumerable<vendaScalarWhereInput>
  }

  export type produtoCreateNestedOneWithoutItemInput = {
    create?: XOR<produtoCreateWithoutItemInput, produtoUncheckedCreateWithoutItemInput>
    connectOrCreate?: produtoCreateOrConnectWithoutItemInput
    connect?: produtoWhereUniqueInput
  }

  export type vendaCreateNestedOneWithoutItemInput = {
    create?: XOR<vendaCreateWithoutItemInput, vendaUncheckedCreateWithoutItemInput>
    connectOrCreate?: vendaCreateOrConnectWithoutItemInput
    connect?: vendaWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type produtoUpdateOneWithoutItemInput = {
    create?: XOR<produtoCreateWithoutItemInput, produtoUncheckedCreateWithoutItemInput>
    connectOrCreate?: produtoCreateOrConnectWithoutItemInput
    upsert?: produtoUpsertWithoutItemInput
    disconnect?: boolean
    delete?: boolean
    connect?: produtoWhereUniqueInput
    update?: XOR<produtoUpdateWithoutItemInput, produtoUncheckedUpdateWithoutItemInput>
  }

  export type vendaUpdateOneWithoutItemInput = {
    create?: XOR<vendaCreateWithoutItemInput, vendaUncheckedCreateWithoutItemInput>
    connectOrCreate?: vendaCreateOrConnectWithoutItemInput
    upsert?: vendaUpsertWithoutItemInput
    disconnect?: boolean
    delete?: boolean
    connect?: vendaWhereUniqueInput
    update?: XOR<vendaUpdateWithoutItemInput, vendaUncheckedUpdateWithoutItemInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type itemCreateNestedManyWithoutProdutoInput = {
    create?: XOR<Enumerable<itemCreateWithoutProdutoInput>, Enumerable<itemUncheckedCreateWithoutProdutoInput>>
    connectOrCreate?: Enumerable<itemCreateOrConnectWithoutProdutoInput>
    createMany?: itemCreateManyProdutoInputEnvelope
    connect?: Enumerable<itemWhereUniqueInput>
  }

  export type itemUncheckedCreateNestedManyWithoutProdutoInput = {
    create?: XOR<Enumerable<itemCreateWithoutProdutoInput>, Enumerable<itemUncheckedCreateWithoutProdutoInput>>
    connectOrCreate?: Enumerable<itemCreateOrConnectWithoutProdutoInput>
    createMany?: itemCreateManyProdutoInputEnvelope
    connect?: Enumerable<itemWhereUniqueInput>
  }

  export type itemUpdateManyWithoutProdutoInput = {
    create?: XOR<Enumerable<itemCreateWithoutProdutoInput>, Enumerable<itemUncheckedCreateWithoutProdutoInput>>
    connectOrCreate?: Enumerable<itemCreateOrConnectWithoutProdutoInput>
    upsert?: Enumerable<itemUpsertWithWhereUniqueWithoutProdutoInput>
    createMany?: itemCreateManyProdutoInputEnvelope
    set?: Enumerable<itemWhereUniqueInput>
    disconnect?: Enumerable<itemWhereUniqueInput>
    delete?: Enumerable<itemWhereUniqueInput>
    connect?: Enumerable<itemWhereUniqueInput>
    update?: Enumerable<itemUpdateWithWhereUniqueWithoutProdutoInput>
    updateMany?: Enumerable<itemUpdateManyWithWhereWithoutProdutoInput>
    deleteMany?: Enumerable<itemScalarWhereInput>
  }

  export type itemUncheckedUpdateManyWithoutProdutoInput = {
    create?: XOR<Enumerable<itemCreateWithoutProdutoInput>, Enumerable<itemUncheckedCreateWithoutProdutoInput>>
    connectOrCreate?: Enumerable<itemCreateOrConnectWithoutProdutoInput>
    upsert?: Enumerable<itemUpsertWithWhereUniqueWithoutProdutoInput>
    createMany?: itemCreateManyProdutoInputEnvelope
    set?: Enumerable<itemWhereUniqueInput>
    disconnect?: Enumerable<itemWhereUniqueInput>
    delete?: Enumerable<itemWhereUniqueInput>
    connect?: Enumerable<itemWhereUniqueInput>
    update?: Enumerable<itemUpdateWithWhereUniqueWithoutProdutoInput>
    updateMany?: Enumerable<itemUpdateManyWithWhereWithoutProdutoInput>
    deleteMany?: Enumerable<itemScalarWhereInput>
  }

  export type clienteCreateNestedOneWithoutVendaInput = {
    create?: XOR<clienteCreateWithoutVendaInput, clienteUncheckedCreateWithoutVendaInput>
    connectOrCreate?: clienteCreateOrConnectWithoutVendaInput
    connect?: clienteWhereUniqueInput
  }

  export type itemCreateNestedManyWithoutVendaInput = {
    create?: XOR<Enumerable<itemCreateWithoutVendaInput>, Enumerable<itemUncheckedCreateWithoutVendaInput>>
    connectOrCreate?: Enumerable<itemCreateOrConnectWithoutVendaInput>
    createMany?: itemCreateManyVendaInputEnvelope
    connect?: Enumerable<itemWhereUniqueInput>
  }

  export type itemUncheckedCreateNestedManyWithoutVendaInput = {
    create?: XOR<Enumerable<itemCreateWithoutVendaInput>, Enumerable<itemUncheckedCreateWithoutVendaInput>>
    connectOrCreate?: Enumerable<itemCreateOrConnectWithoutVendaInput>
    createMany?: itemCreateManyVendaInputEnvelope
    connect?: Enumerable<itemWhereUniqueInput>
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type clienteUpdateOneWithoutVendaInput = {
    create?: XOR<clienteCreateWithoutVendaInput, clienteUncheckedCreateWithoutVendaInput>
    connectOrCreate?: clienteCreateOrConnectWithoutVendaInput
    upsert?: clienteUpsertWithoutVendaInput
    disconnect?: boolean
    delete?: boolean
    connect?: clienteWhereUniqueInput
    update?: XOR<clienteUpdateWithoutVendaInput, clienteUncheckedUpdateWithoutVendaInput>
  }

  export type itemUpdateManyWithoutVendaInput = {
    create?: XOR<Enumerable<itemCreateWithoutVendaInput>, Enumerable<itemUncheckedCreateWithoutVendaInput>>
    connectOrCreate?: Enumerable<itemCreateOrConnectWithoutVendaInput>
    upsert?: Enumerable<itemUpsertWithWhereUniqueWithoutVendaInput>
    createMany?: itemCreateManyVendaInputEnvelope
    set?: Enumerable<itemWhereUniqueInput>
    disconnect?: Enumerable<itemWhereUniqueInput>
    delete?: Enumerable<itemWhereUniqueInput>
    connect?: Enumerable<itemWhereUniqueInput>
    update?: Enumerable<itemUpdateWithWhereUniqueWithoutVendaInput>
    updateMany?: Enumerable<itemUpdateManyWithWhereWithoutVendaInput>
    deleteMany?: Enumerable<itemScalarWhereInput>
  }

  export type itemUncheckedUpdateManyWithoutVendaInput = {
    create?: XOR<Enumerable<itemCreateWithoutVendaInput>, Enumerable<itemUncheckedCreateWithoutVendaInput>>
    connectOrCreate?: Enumerable<itemCreateOrConnectWithoutVendaInput>
    upsert?: Enumerable<itemUpsertWithWhereUniqueWithoutVendaInput>
    createMany?: itemCreateManyVendaInputEnvelope
    set?: Enumerable<itemWhereUniqueInput>
    disconnect?: Enumerable<itemWhereUniqueInput>
    delete?: Enumerable<itemWhereUniqueInput>
    connect?: Enumerable<itemWhereUniqueInput>
    update?: Enumerable<itemUpdateWithWhereUniqueWithoutVendaInput>
    updateMany?: Enumerable<itemUpdateManyWithWhereWithoutVendaInput>
    deleteMany?: Enumerable<itemScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type vendaCreateWithoutClienteInput = {
    frete?: number | null
    total?: number | null
    dataCadastro?: Date | string | null
    item?: itemCreateNestedManyWithoutVendaInput
  }

  export type vendaUncheckedCreateWithoutClienteInput = {
    id_venda?: number
    frete?: number | null
    total?: number | null
    dataCadastro?: Date | string | null
    item?: itemUncheckedCreateNestedManyWithoutVendaInput
  }

  export type vendaCreateOrConnectWithoutClienteInput = {
    where: vendaWhereUniqueInput
    create: XOR<vendaCreateWithoutClienteInput, vendaUncheckedCreateWithoutClienteInput>
  }

  export type vendaCreateManyClienteInputEnvelope = {
    data: Enumerable<vendaCreateManyClienteInput>
    skipDuplicates?: boolean
  }

  export type vendaUpsertWithWhereUniqueWithoutClienteInput = {
    where: vendaWhereUniqueInput
    update: XOR<vendaUpdateWithoutClienteInput, vendaUncheckedUpdateWithoutClienteInput>
    create: XOR<vendaCreateWithoutClienteInput, vendaUncheckedCreateWithoutClienteInput>
  }

  export type vendaUpdateWithWhereUniqueWithoutClienteInput = {
    where: vendaWhereUniqueInput
    data: XOR<vendaUpdateWithoutClienteInput, vendaUncheckedUpdateWithoutClienteInput>
  }

  export type vendaUpdateManyWithWhereWithoutClienteInput = {
    where: vendaScalarWhereInput
    data: XOR<vendaUpdateManyMutationInput, vendaUncheckedUpdateManyWithoutVendaInput>
  }

  export type vendaScalarWhereInput = {
    AND?: Enumerable<vendaScalarWhereInput>
    OR?: Enumerable<vendaScalarWhereInput>
    NOT?: Enumerable<vendaScalarWhereInput>
    id_venda?: IntFilter | number
    frete?: FloatNullableFilter | number | null
    total?: FloatNullableFilter | number | null
    id_cliente?: IntNullableFilter | number | null
    dataCadastro?: DateTimeNullableFilter | Date | string | null
  }

  export type produtoCreateWithoutItemInput = {
    id_produto: number
    nome?: string | null
    valor?: number | null
  }

  export type produtoUncheckedCreateWithoutItemInput = {
    id_produto: number
    nome?: string | null
    valor?: number | null
  }

  export type produtoCreateOrConnectWithoutItemInput = {
    where: produtoWhereUniqueInput
    create: XOR<produtoCreateWithoutItemInput, produtoUncheckedCreateWithoutItemInput>
  }

  export type vendaCreateWithoutItemInput = {
    frete?: number | null
    total?: number | null
    dataCadastro?: Date | string | null
    cliente?: clienteCreateNestedOneWithoutVendaInput
  }

  export type vendaUncheckedCreateWithoutItemInput = {
    id_venda?: number
    frete?: number | null
    total?: number | null
    id_cliente?: number | null
    dataCadastro?: Date | string | null
  }

  export type vendaCreateOrConnectWithoutItemInput = {
    where: vendaWhereUniqueInput
    create: XOR<vendaCreateWithoutItemInput, vendaUncheckedCreateWithoutItemInput>
  }

  export type produtoUpsertWithoutItemInput = {
    update: XOR<produtoUpdateWithoutItemInput, produtoUncheckedUpdateWithoutItemInput>
    create: XOR<produtoCreateWithoutItemInput, produtoUncheckedCreateWithoutItemInput>
  }

  export type produtoUpdateWithoutItemInput = {
    id_produto?: IntFieldUpdateOperationsInput | number
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    valor?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type produtoUncheckedUpdateWithoutItemInput = {
    id_produto?: IntFieldUpdateOperationsInput | number
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    valor?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type vendaUpsertWithoutItemInput = {
    update: XOR<vendaUpdateWithoutItemInput, vendaUncheckedUpdateWithoutItemInput>
    create: XOR<vendaCreateWithoutItemInput, vendaUncheckedCreateWithoutItemInput>
  }

  export type vendaUpdateWithoutItemInput = {
    frete?: NullableFloatFieldUpdateOperationsInput | number | null
    total?: NullableFloatFieldUpdateOperationsInput | number | null
    dataCadastro?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente?: clienteUpdateOneWithoutVendaInput
  }

  export type vendaUncheckedUpdateWithoutItemInput = {
    id_venda?: IntFieldUpdateOperationsInput | number
    frete?: NullableFloatFieldUpdateOperationsInput | number | null
    total?: NullableFloatFieldUpdateOperationsInput | number | null
    id_cliente?: NullableIntFieldUpdateOperationsInput | number | null
    dataCadastro?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type itemCreateWithoutProdutoInput = {
    valor?: number | null
    venda?: vendaCreateNestedOneWithoutItemInput
  }

  export type itemUncheckedCreateWithoutProdutoInput = {
    id_item?: number
    valor?: number | null
    id_venda?: number | null
  }

  export type itemCreateOrConnectWithoutProdutoInput = {
    where: itemWhereUniqueInput
    create: XOR<itemCreateWithoutProdutoInput, itemUncheckedCreateWithoutProdutoInput>
  }

  export type itemCreateManyProdutoInputEnvelope = {
    data: Enumerable<itemCreateManyProdutoInput>
    skipDuplicates?: boolean
  }

  export type itemUpsertWithWhereUniqueWithoutProdutoInput = {
    where: itemWhereUniqueInput
    update: XOR<itemUpdateWithoutProdutoInput, itemUncheckedUpdateWithoutProdutoInput>
    create: XOR<itemCreateWithoutProdutoInput, itemUncheckedCreateWithoutProdutoInput>
  }

  export type itemUpdateWithWhereUniqueWithoutProdutoInput = {
    where: itemWhereUniqueInput
    data: XOR<itemUpdateWithoutProdutoInput, itemUncheckedUpdateWithoutProdutoInput>
  }

  export type itemUpdateManyWithWhereWithoutProdutoInput = {
    where: itemScalarWhereInput
    data: XOR<itemUpdateManyMutationInput, itemUncheckedUpdateManyWithoutItemInput>
  }

  export type itemScalarWhereInput = {
    AND?: Enumerable<itemScalarWhereInput>
    OR?: Enumerable<itemScalarWhereInput>
    NOT?: Enumerable<itemScalarWhereInput>
    id_item?: IntFilter | number
    valor?: FloatNullableFilter | number | null
    id_produto?: IntNullableFilter | number | null
    id_venda?: IntNullableFilter | number | null
  }

  export type clienteCreateWithoutVendaInput = {
    id_cliente: number
    nome?: string | null
  }

  export type clienteUncheckedCreateWithoutVendaInput = {
    id_cliente: number
    nome?: string | null
  }

  export type clienteCreateOrConnectWithoutVendaInput = {
    where: clienteWhereUniqueInput
    create: XOR<clienteCreateWithoutVendaInput, clienteUncheckedCreateWithoutVendaInput>
  }

  export type itemCreateWithoutVendaInput = {
    valor?: number | null
    produto?: produtoCreateNestedOneWithoutItemInput
  }

  export type itemUncheckedCreateWithoutVendaInput = {
    id_item?: number
    valor?: number | null
    id_produto?: number | null
  }

  export type itemCreateOrConnectWithoutVendaInput = {
    where: itemWhereUniqueInput
    create: XOR<itemCreateWithoutVendaInput, itemUncheckedCreateWithoutVendaInput>
  }

  export type itemCreateManyVendaInputEnvelope = {
    data: Enumerable<itemCreateManyVendaInput>
    skipDuplicates?: boolean
  }

  export type clienteUpsertWithoutVendaInput = {
    update: XOR<clienteUpdateWithoutVendaInput, clienteUncheckedUpdateWithoutVendaInput>
    create: XOR<clienteCreateWithoutVendaInput, clienteUncheckedCreateWithoutVendaInput>
  }

  export type clienteUpdateWithoutVendaInput = {
    id_cliente?: IntFieldUpdateOperationsInput | number
    nome?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type clienteUncheckedUpdateWithoutVendaInput = {
    id_cliente?: IntFieldUpdateOperationsInput | number
    nome?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type itemUpsertWithWhereUniqueWithoutVendaInput = {
    where: itemWhereUniqueInput
    update: XOR<itemUpdateWithoutVendaInput, itemUncheckedUpdateWithoutVendaInput>
    create: XOR<itemCreateWithoutVendaInput, itemUncheckedCreateWithoutVendaInput>
  }

  export type itemUpdateWithWhereUniqueWithoutVendaInput = {
    where: itemWhereUniqueInput
    data: XOR<itemUpdateWithoutVendaInput, itemUncheckedUpdateWithoutVendaInput>
  }

  export type itemUpdateManyWithWhereWithoutVendaInput = {
    where: itemScalarWhereInput
    data: XOR<itemUpdateManyMutationInput, itemUncheckedUpdateManyWithoutItemInput>
  }

  export type vendaCreateManyClienteInput = {
    id_venda?: number
    frete?: number | null
    total?: number | null
    dataCadastro?: Date | string | null
  }

  export type vendaUpdateWithoutClienteInput = {
    frete?: NullableFloatFieldUpdateOperationsInput | number | null
    total?: NullableFloatFieldUpdateOperationsInput | number | null
    dataCadastro?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    item?: itemUpdateManyWithoutVendaInput
  }

  export type vendaUncheckedUpdateWithoutClienteInput = {
    id_venda?: IntFieldUpdateOperationsInput | number
    frete?: NullableFloatFieldUpdateOperationsInput | number | null
    total?: NullableFloatFieldUpdateOperationsInput | number | null
    dataCadastro?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    item?: itemUncheckedUpdateManyWithoutVendaInput
  }

  export type vendaUncheckedUpdateManyWithoutVendaInput = {
    id_venda?: IntFieldUpdateOperationsInput | number
    frete?: NullableFloatFieldUpdateOperationsInput | number | null
    total?: NullableFloatFieldUpdateOperationsInput | number | null
    dataCadastro?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type itemCreateManyProdutoInput = {
    id_item?: number
    valor?: number | null
    id_venda?: number | null
  }

  export type itemUpdateWithoutProdutoInput = {
    valor?: NullableFloatFieldUpdateOperationsInput | number | null
    venda?: vendaUpdateOneWithoutItemInput
  }

  export type itemUncheckedUpdateWithoutProdutoInput = {
    id_item?: IntFieldUpdateOperationsInput | number
    valor?: NullableFloatFieldUpdateOperationsInput | number | null
    id_venda?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type itemUncheckedUpdateManyWithoutItemInput = {
    id_item?: IntFieldUpdateOperationsInput | number
    valor?: NullableFloatFieldUpdateOperationsInput | number | null
    id_venda?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type itemCreateManyVendaInput = {
    id_item?: number
    valor?: number | null
    id_produto?: number | null
  }

  export type itemUpdateWithoutVendaInput = {
    valor?: NullableFloatFieldUpdateOperationsInput | number | null
    produto?: produtoUpdateOneWithoutItemInput
  }

  export type itemUncheckedUpdateWithoutVendaInput = {
    id_item?: IntFieldUpdateOperationsInput | number
    valor?: NullableFloatFieldUpdateOperationsInput | number | null
    id_produto?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}